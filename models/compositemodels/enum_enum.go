// Code generated by go-enum
// DO NOT EDIT!

package compositemodels

import (
	"fmt"
)

const (
	// OpADDITION is a Op of type ADDITION
	OpADDITION Op = iota +1
	// OpSUBTRACTION is a Op of type SUBTRACTION
	OpSUBTRACTION
	// OpMULTIPLICATION is a Op of type MULTIPLICATION
	OpMULTIPLICATION
	// OpDIVISION is a Op of type DIVISION
	OpDIVISION
	// OpRANDOM is a Op of type RANDOM
	OpRANDOM
)

const _OpName = "ADDITIONSUBTRACTIONMULTIPLICATIONDIVISIONRANDOM"

var _OpMap = map[Op]string{
	0: _OpName[0:8],
	1: _OpName[8:19],
	2: _OpName[19:33],
	3: _OpName[33:41],
	4: _OpName[41:47],
}

// String implements the Stringer interface.
func (x Op) String() string {
	if str, ok := _OpMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Op(%d)", x)
}

var _OpValue = map[string]Op{
	_OpName[0:8]:   0,
	_OpName[8:19]:  1,
	_OpName[19:33]: 2,
	_OpName[33:41]: 3,
	_OpName[41:47]: 4,
}

// ParseOp attempts to convert a string to a Op
func ParseOp(name string) (Op, error) {
	if x, ok := _OpValue[name]; ok {
		return x, nil
	}
	return Op(0), fmt.Errorf("%s is not a valid Op", name)
}
